<Window x:Class="SarifViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SarifViewer"
        xmlns:models="clr-namespace:SarifViewer.Models"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        mc:Ignorable="d"
        Title="Sonar-DotNet IT Report Viewer" Height="450" Width="800">
    <Window.DataContext>
        <local:MainWindowViewModel />
    </Window.DataContext>
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    </Window.Resources>

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding ApplicationLoadedCommand}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding ApplicationClosingCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Grid.RowSpan="2"
              Panel.ZIndex="1000"
              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}">

            <Rectangle Opacity="0.5">
                <Rectangle.Fill>
                    <RadialGradientBrush>
                        <GradientStop Color="Black" Offset="0" />
                        <GradientStop Color="Gray" Offset="1" />
                    </RadialGradientBrush>
                </Rectangle.Fill>
            </Rectangle>

            <Border BorderThickness="2" BorderBrush="White"
                    Background="White"
                    CornerRadius="5"
                    HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock Text="Loading..." Margin="10" FontSize="72" />
            </Border>

        </Grid>

        <Grid Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
                <ColumnDefinition  Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBlock Grid.Row="0" Grid.Column="0"
                       Text="Repository Folder:" />
            <TextBox Grid.Row="0" Grid.Column="1"
                     IsReadOnly="True"
                     Text="{Binding Settings.RepositoryFolderPath}" />
            <Button Grid.Row="0" Grid.Column="2"
                    Content="Select Folder"
                    Command="{Binding SelectRepositoryFolderCommand}" />

            <TextBlock Grid.Row="1" Grid.Column="0"
                       Text="Rule ID:" />
            <TextBox Grid.Row="1" Grid.Column="1"
                     Text="{Binding Settings.Filter.IssueId, UpdateSourceTrigger=PropertyChanged}"/>
        </Grid>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Grid Grid.Column="0" Background="AliceBlue">
                <ListView x:Name="IssueList" ItemsSource="{Binding NewIssues}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding SelectedIssueCommand}"
                                                   CommandParameter="{Binding ElementName=IssueList, Path=SelectedItem}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <d:ListView.ItemsSource>
                        <x:Array Type="models:Issue">
                            <models:Issue Id="S1234" Message="Refactor method 'abc' to have no parameters." />
                            <models:Issue Id="S1234" Message="Refactor method 'abc' to have no parameters." />
                        </x:Array>
                    </d:ListView.ItemsSource>
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <StackPanel>
                                <TextBlock Text="{Binding Id}" />
                                <TextBlock Text="{Binding Message}" TextWrapping="Wrap" />
                                <TextBlock Text="{Binding FirstLocationUri}" TextWrapping="Wrap" />
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </Grid>

            <GridSplitter Grid.Column="1"
              HorizontalAlignment="Left"
              VerticalAlignment="Stretch"
              Background="DarkGray"
              ShowsPreview="true"
              Width="5"/>

            <TextBox x:Name="SourceCodeTextBox"
                     Margin="5,0,0,0"
                     Grid.Column="1"
                     Text="{Binding SourceCode}"
                     FontFamily="Courier New"
                     IsReadOnly="True"
                     IsInactiveSelectionHighlightEnabled="True"
                     ScrollViewer.HorizontalScrollBarVisibility="Auto"
                     ScrollViewer.VerticalScrollBarVisibility="Auto"
                     SelectionBrush="OrangeRed">
                <TextBox.Resources>
                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                         Color="OrangeRed"/>
                </TextBox.Resources>
                <d:TextBox.Text xml:space="preserve">using System;
using System.Linq.Expressions;

namespace AutoMapper.Internal.Mappers
{
    using static Expression;
    public class ConvertMapper : IObjectMapper
    {
        public static bool IsPrimitive(Type type) =&gt; type.IsPrimitive || type == typeof(string) || type == typeof(decimal);
        public bool IsMatch(in TypePair types) =&gt; (types.SourceType == typeof(string) &amp;&amp; types.DestinationType == typeof(DateTime)) ||
            (IsPrimitive(types.SourceType) &amp;&amp; IsPrimitive(types.DestinationType));
        public Expression MapExpression(IGlobalConfiguration configurationProvider, ProfileMap profileMap,
            MemberMap memberMap, Expression sourceExpression, Expression destExpression)
        {
            var convertMethod = typeof(Convert).GetMethod(&quot;To&quot; + destExpression.Type.Name, new[] { sourceExpression.Type });
            return Call(convertMethod, sourceExpression);
        }
    }
}
                </d:TextBox.Text>
            </TextBox>
        </Grid>
    </Grid>
</Window>
