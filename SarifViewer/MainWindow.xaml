<Window x:Class="SarifViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SarifViewer"
        xmlns:models="clr-namespace:SarifViewer.Models"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        mc:Ignorable="d"
        WindowState="Maximized"
        Title="Sonar-DotNet IT Report Viewer" Height="800" Width="800">
    <Window.DataContext>
        <local:MainWindowViewModel />
    </Window.DataContext>
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

        <Style TargetType="TextBlock" x:Key="StaticLabelStyle">
            <Setter Property="Margin" Value="5" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="FontWeight" Value="Bold" />
        </Style>

        <Style TargetType="TextBox" x:Key="FilterTextBoxStyle">
            <Setter Property="Margin" Value="0,1" />
            <Setter Property="Padding" Value="3" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>

        <Style TargetType="Button" x:Key="FilterButtonBoxStyle">
            <Setter Property="Margin" Value="5" />
            <Setter Property="Padding" Value="3" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>

        <Style TargetType="{x:Type Panel}" x:Key="FilterPanelStyle">
            <Setter Property="Background" Value="LightGray" />
        </Style>

        <Style TargetType="ListView" x:Key="IssueListViewStyle">
            <Setter Property="AlternationCount" Value="2" />
            <Setter Property="FontSize" Value="16" />
        </Style>

        <Style TargetType="ListViewItem">
            <Style.Triggers>
                <Trigger Property="ItemsControl.AlternationIndex"  Value="0">
                    <Setter Property="Background" Value="GhostWhite" />
                </Trigger>
                <Trigger Property="ItemsControl.AlternationIndex"  Value="1">
                    <Setter Property="Background" Value="White" />
                </Trigger>
            </Style.Triggers>
            <Setter Property="Padding" Value="8" />
        </Style>
    </Window.Resources>

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding ApplicationLoadedCommand}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding ApplicationClosingCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Grid.RowSpan="2"
              Panel.ZIndex="1000"
              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}">

            <Rectangle Opacity="0.5">
                <Rectangle.Fill>
                    <RadialGradientBrush>
                        <GradientStop Color="Black" Offset="0" />
                        <GradientStop Color="Gray" Offset="1" />
                    </RadialGradientBrush>
                </Rectangle.Fill>
            </Rectangle>

            <Border BorderThickness="2" BorderBrush="White"
                    Background="White"
                    CornerRadius="5"
                    HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock Text="Loading..." Margin="10" FontSize="72" />
            </Border>

        </Grid>

        <Grid Grid.Row="0" Style="{StaticResource FilterPanelStyle}">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
                <ColumnDefinition  Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBlock Grid.Row="0" Grid.Column="0"
                       Style="{StaticResource StaticLabelStyle}"
                       Text="Repository Folder:" />
            <TextBox Grid.Row="0" Grid.Column="1"
                     Style="{StaticResource FilterTextBoxStyle}"
                     IsReadOnly="True"
                     Text="{Binding Settings.RepositoryFolderPath}" />
            <Button Grid.Row="0" Grid.Column="2"
                    Style="{StaticResource FilterButtonBoxStyle}"
                    Content="Select Folder"
                    Command="{Binding SelectRepositoryFolderCommand}" />

            <TextBlock Grid.Row="1" Grid.Column="0"
                       Style="{StaticResource StaticLabelStyle}"
                       Text="Rule ID:" />
            <TextBox Grid.Row="1" Grid.Column="1"
                     Style="{StaticResource FilterTextBoxStyle}"
                     Text="{Binding Settings.Filter.IssueId, UpdateSourceTrigger=PropertyChanged}"/>

            <TextBlock Grid.Row="2" Grid.Column="0"
                       Style="{StaticResource StaticLabelStyle}"
                       Text="Source File Path:" />
            <TextBox Grid.Row="2" Grid.Column="1"
                     Style="{StaticResource FilterTextBoxStyle}"
                     Text="{Binding Settings.Filter.SourceFilePath, UpdateSourceTrigger=PropertyChanged}"/>

            <TextBlock Grid.Row="3" Grid.Column="0"
                       Style="{StaticResource StaticLabelStyle}"
                       Text="Issue Message:" />
            <TextBox Grid.Row="3" Grid.Column="1"
                     Style="{StaticResource FilterTextBoxStyle}"
                     Text="{Binding Settings.Filter.IssueMessage, UpdateSourceTrigger=PropertyChanged}"/>

            <TextBlock Grid.Row="4" Grid.Column="0"
                       Style="{StaticResource StaticLabelStyle}"
                       Text="Language:" />
            <ComboBox Grid.Row="4" Grid.Column="1"
                      d:SelectedIndex="0"
                      ItemsSource="{Binding IssueLanguageOptions, Mode=OneTime}"
                      SelectedValue="{Binding Settings.Filter.IssueLanguage}"
                      SelectedValuePath="Value"
                      DisplayMemberPath="DisplayName" />

            <TextBlock Grid.Row="5" Grid.Column="0"
                       Style="{StaticResource StaticLabelStyle}"
                       Text="Issue State:" />
            <ComboBox Grid.Row="5" Grid.Column="1"
                      SelectedIndex="0"
                      ItemsSource="{Binding IssueTypeOptions}"
                      SelectedValue="{Binding Settings.Filter.IssueState}"
                      SelectedValuePath="Value"
                      DisplayMemberPath="DisplayName" />
        </Grid>

        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition  />
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Grid Grid.Column="0" Grid.Row="1" Background="AliceBlue">
                <ListView x:Name="IssueList"
                          Style="{StaticResource IssueListViewStyle}"
                          ItemsSource="{Binding FilteredIssues}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding SelectedIssueCommand}"
                                                   CommandParameter="{Binding ElementName=IssueList, Path=SelectedItem}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <d:ListView.ItemsSource>
                        <x:Array Type="models:Issue">
                            <models:Issue Id="S1234" Message="Refactor method 'abc' to have no parameters." />
                            <models:Issue Id="S1234" Message="Refactor method 'abc' to have no parameters." />
                            <models:Issue Id="S1234" Message="Refactor method 'abc' to have no parameters." />
                            <models:Issue Id="S1234" Message="Refactor method 'abc' to have no parameters." />
                            <models:Issue Id="S1234" Message="Refactor method 'abc' to have no parameters." />
                            <models:Issue Id="S1234" Message="Refactor method 'abc' to have no parameters." />
                            <models:Issue Id="S1234" Message="Refactor method 'abc' to have no parameters." />
                        </x:Array>
                    </d:ListView.ItemsSource>
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <StackPanel>
                                <StackPanel Orientation="Horizontal" Margin="0,5">
                                    <TextBlock Text="{Binding Id}" FontWeight="Bold" />
                                    <TextBlock Text=":" Margin="0,0,5,0" />
                                    <TextBlock Text="{Binding Message}" TextWrapping="Wrap" />
                                </StackPanel>

                                <TextBlock Text="{Binding FirstLocationUriAndLineNumber}" TextWrapping="Wrap" />
                            </StackPanel>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </Grid>

            <TextBox x:Name="SourceCodeTextBox"
                     Margin="5,0,0,0"
                     Grid.Column="1" Grid.Row="1"
                     Text="{Binding SourceCode}"
                     FontFamily="Courier New" FontSize="18"
                     IsReadOnly="True"
                     IsInactiveSelectionHighlightEnabled="True"
                     ScrollViewer.HorizontalScrollBarVisibility="Auto"
                     ScrollViewer.VerticalScrollBarVisibility="Auto"
                     SelectionBrush="OrangeRed">
                <TextBox.Resources>
                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                         Color="OrangeRed"/>
                </TextBox.Resources>
                <d:TextBox.Text xml:space="preserve">using System;
using System.Linq.Expressions;

namespace AutoMapper.Internal.Mappers
{
    using static Expression;
    public class ConvertMapper : IObjectMapper
    {
        public static bool IsPrimitive(Type type) =&gt; type.IsPrimitive || type == typeof(string) || type == typeof(decimal);
        public bool IsMatch(in TypePair types) =&gt; (types.SourceType == typeof(string) &amp;&amp; types.DestinationType == typeof(DateTime)) ||
            (IsPrimitive(types.SourceType) &amp;&amp; IsPrimitive(types.DestinationType));
        public Expression MapExpression(IGlobalConfiguration configurationProvider, ProfileMap profileMap,
            MemberMap memberMap, Expression sourceExpression, Expression destExpression)
        {
            var convertMethod = typeof(Convert).GetMethod(&quot;To&quot; + destExpression.Type.Name, new[] { sourceExpression.Type });
            return Call(convertMethod, sourceExpression);
        }
    }
}
                </d:TextBox.Text>
            </TextBox>

            <GridSplitter Grid.Column="1" Grid.Row="1"
              HorizontalAlignment="Left"
              VerticalAlignment="Stretch"
              Background="DarkGray"
              ShowsPreview="true"
              Width="5"/>
        </Grid>
    </Grid>
</Window>
